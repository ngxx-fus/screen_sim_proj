#include "include/app.h"
#include "config/config.h"
#include "include/global.h"

SDL_Window      *gWindow                = NULL;
SDL_Renderer    *gRenderer              = NULL;
SDL_Texture     *gTexture               = NULL;
TTF_Font        *font                   = NULL;
Queue_t         *toMainThrQueue         = NULL;
Queue_t         *toAppThrQueue          = NULL;
Queue_t         *keyboardEventQueue     = NULL;
pthread_mutex_t SDLLock                 = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t simFlagLock             = PTHREAD_MUTEX_INITIALIZER;
simStatus_t     simStatus               = STATUS_STOPPED;
uint32_t        simFlag                 = 0;
SDL_Event        simRenderEvent;

int app_thread(void *data) {
    __sim_entry("app_thread(...)");
    main_app();
    __sim_exit("app_thread(...)");
    return 0;
}

int main() {
    __sim_entry("main()");
    
    atexit(simScreenExit);
    atexit(simFontExit);
    atexit(simQueueExit);
    atexit(simInterruptExit);

    simStatus = STATUS_INIT;

    if (simQueueInit() != STATUS_OKE)   return ERROR_UNKNOWN;
    if (screen_init() != STATUS_OKE)    return ERROR_UNKNOWN;
    if (font_init()   != STATUS_OKE)    return ERROR_UNKNOWN;
    
    __sim_log("[+] InputThread");
    SDL_Thread *thread0 = SDL_CreateThread(input_thread, "InputThread", NULL);
    if (!thread0) {
        __sim_log("[main] Create InputThread failed: %s", SDL_GetError());
        return ERROR_UNKNOWN;
    }

    if (simInterruptInit() != STATUS_OKE)  return ERROR_UNKNOWN;
    
    intro();

    simEnableInterrupt(0, INT_PULLDOWN);

    __sim_log("[+] LoopInterruptService");
    SDL_Thread *thread1 = SDL_CreateThread(loopTrackInterruptService, "LoopInterruptService", NULL);
    if (!thread1) {
        printf("[main] AppThread failed: %s\n", SDL_GetError());
        return ERROR_UNKNOWN;
    }

    simStatus = STATUS_RUNNING;
    
    __sim_log("[+] AppThread");
    SDL_Thread *thread2 = SDL_CreateThread(app_thread, "AppThread", NULL);
    if (!thread2) {
        printf("[main] AppThread failed: %s\n", SDL_GetError());
        return ERROR_UNKNOWN;
    }

//     while (simStatus == STATUS_RUNNING) {
//         __entry_critical_section(&simFlagLock);
//         if(simFlag & __mask32(FLAG_RENDER_REQ)){
//             __entry_SDL_critical_section();
//             SDL_RenderPresent(gRenderer);
//             __exit_SDL_critical_section();
//             simFlag &= __inv_mask32(FLAG_RENDER_REQ);
//         }
//         __exit_critical_section(&simFlagLock);
//         SDL_Delay(15);
//     }

    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        __sim_sleep_us(__MSEC(1000));
        __sim_log("Got render request!");
        if (event.type == SDL_USEREVENT) {
            switch (event.user.code) {
                case REQ_SCR_RENDER:
                    SDL_RenderPresent(gRenderer);
                    break;
                case REQ_SIM_EXIT:
                    break;
            }
        }
        if(simStatus == STATUS_STOPPED) break;
    }

    __sim_exit("main()");
    return 0;
}

